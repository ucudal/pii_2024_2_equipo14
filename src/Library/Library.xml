<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Ataque">
            <summary>
            Esta es la clase Ataque. Se encarga de crear instancias de ataques que usarán los Pokémons en la batalla.
            </summary>
        </member>
        <member name="M:Library.Ataque.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Ataque"/>.
            </summary>
            <param name="nombre">El nombre del ataque.</param>
            <param name="Dano">El daño que influye el ataque.</param>
            <param name="Precision">La precisión del ataque.</param>
            <param name="Tipo">El nombre del tipo de ataque.</param>
        </member>
        <member name="P:Library.Ataque.Nombre">
            <summary>
            Obtiene o establece un string que indica el nombre del ataque.
            </summary>
        </member>
        <member name="P:Library.Ataque.Dano">
            <summary>
            Obtiene o establece un string que indica el tipo del ataque.
            </summary>
            <summary>
            Obtiene o establece un valor (int) que indica el daño del ataque.
            </summary>
        </member>
        <member name="P:Library.Ataque.Precision">
            <summary>
            Obtiene o establece un valor (int) que indica la precisión del ataque.
            </summary>
        </member>
        <member name="M:Library.Ataque.CalcularPrecision">
            <summary>
            Calcula si el ataque es preciso, es decir, si hace o no daño/causa un efecto en la víctima.
            </summary>
            <returns>
            <c>0</c> si el ataque es preciso, <c>1</c> en caso contrario.
            </returns>
        </member>
        <member name="T:Library.AtaqueEspecial">
            <summary>
            Esta es la clase abstracta AtaqueEspecial. Hereda <see cref="T:Library.Ataque"/> y agrega la propiedad Efecto.
            </summary>
        </member>
        <member name="M:Library.AtaqueEspecial.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Es un constructor que utilizarán las clases que la hereden.
            </summary>
            <param name="nombre">El nombre del ataque.</param>
            <param name="Dano">El daño que influye el ataque.</param>
            <param name="Precision">La precisión del ataque.</param>
            <param name="Tipo">El nombre del tipo de ataque.</param>
            <param name="Efecto">El nombre del efecto que realizará el ataque.</param>
        </member>
        <member name="P:Library.AtaqueEspecial.Efecto">
            <summary>
            Obtiene o establece un string que indica el nombre del Efecto
            </summary>
        </member>
        <member name="T:Library.Dormir">
            <summary>
            Esta es la clase Dormir. Hereda <see cref="T:Library.AtaqueEspecial"/> y agrega el método Dormir.
            </summary>
        </member>
        <member name="M:Library.Dormir.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Dormir"/>.
            </summary>
            <param name="nombre">El nombre del ataque.</param>
            <param name="Dano">El daño que influye el ataque.</param>
            <param name="Precision">La precisión del ataque.</param>
            <param name="Tipo">El nombre del tipo de ataque.</param>
            <param name="Efecto">El nombre del efecto que realizará el ataque.</param>
        </member>
        <member name="T:Library.Envenenar">
            <summary>
            Esta es la clase Envenenar. Hereda <see cref="T:Library.AtaqueEspecial"/> y agrega el método Envenenar.
            </summary>
        </member>
        <member name="M:Library.Envenenar.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Envenenar"/>.
            </summary>
            <param name="nombre">El nombre del ataque.</param>
            <param name="Dano">El daño que influye el ataque.</param>
            <param name="Precision">La precisión del ataque.</param>
            <param name="Tipo">El nombre del tipo de ataque.</param>
            <param name="Efecto">El nombre del efecto que realizará el ataque.</param>
        </member>
        <member name="T:Library.Incendio">
            <summary>
            Esta es la clase Incendio. Hereda <see cref="T:Library.AtaqueEspecial"/> y agrega el método Quemar.
            </summary>
        </member>
        <member name="M:Library.Incendio.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Incendio"/>.
            </summary>
            <param name="nombre">El nombre del ataque.</param>
            <param name="Dano">El daño que influye el ataque.</param>
            <param name="Precision">La precisión del ataque.</param>
            <param name="Tipo">El nombre del tipo de ataque.</param>
            <param name="Efecto">El nombre del efecto que realizará el ataque.</param>
        </member>
        <member name="T:Library.Paralizar">
            <summary>
            Esta es la clase Paralizar. Hereda <see cref="T:Library.AtaqueEspecial"/> y agrega el método Paralizar.
            </summary>
        </member>
        <member name="M:Library.Paralizar.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Paralizar"/>.
            </summary>
            <param name="nombre">El nombre del ataque.</param>
            <param name="Dano">El daño que influye el ataque.</param>
            <param name="Precision">La precisión del ataque.</param>
            <param name="Tipo">El nombre del tipo de ataque.</param>
            <param name="Efecto">El nombre del efecto que realizará el ataque.</param>
        </member>
        <member name="T:Library.Item.CuraTotal">
            <summary>
            Esta es la clase CuraTotal. Hereda <see cref="T:Library.Item.Item"/> y agrega el método CurarTotalmente.
            </summary>
        </member>
        <member name="M:Library.Item.CuraTotal.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Item.CuraTotal"/>.
            </summary>
        </member>
        <member name="T:Library.Item.Item">
            <summary>
            Esta es la clase abstracta Item. Los items podrán ser utilizados por los entrenadores en las batallas.
            </summary>
        </member>
        <member name="P:Library.Item.Item.Nombre">
            <summary>
            Obtiene o establece un string que indica el nombre del item.
            </summary>
        </member>
        <member name="P:Library.Item.Item.Descripcion">
            <summary>
            Obtiene o establece un string que indica la descripción del funcionamiento del item.
            </summary>
        </member>
        <member name="T:Library.Item.Revivir">
            <summary>
            Esta es la clase Revivir. Hereda <see cref="T:Library.Item.Item"/> y agrega el método RevivirPokemon.
            </summary>
        </member>
        <member name="M:Library.Item.Revivir.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Item.Revivir"/>.
            </summary>
        </member>
        <member name="T:Library.Item.SuperPocion">
            <summary>
            Esta es la clase SuperPocion. Hereda <see cref="T:Library.Item.Item"/> y agrega el método SuperPocionar
            </summary>
        </member>
        <member name="M:Library.Item.SuperPocion.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Item.SuperPocion"/>.
            </summary>
        </member>
        <member name="T:Library.Otros.Atacar">
            <summary>
            Esta es la clase estática Atacar. Define las acciones a seguir cuando el usuario elige atacar durante la batalla.
            </summary>
        </member>
        <member name="M:Library.Otros.Atacar.Encuentro(Library.Otros.Entrenador,Library.Otros.Entrenador)">
            <summary>
            Determina si un Pokémon ataca a otro y con que ataque de acuerdo a la precisión, efectividad, golpe crítico y efectos.
            </summary>
            <param name="atacante">El entrenador que posee al Pokémon que ataca.</param>
            <param name="victima">El entrenador que posee al Pokémon que es atacado..</param>
        </member>
        <member name="T:Library.Otros.Batalla">
            <summary>
            Esta es la clase estática Batalla. Se encarga de crear instancias de batalla, y gestionar los turnos y acciones de los jugadores.
            </summary>
        </member>
        <member name="F:Library.Otros.Batalla.EnBatalla">
            <summary>
            Atributo estático booleano de batalla que indica si está siendo ejecutada alguna batalla.
            </summary>
        </member>
        <member name="P:Library.Otros.Batalla.Jugador1">
            <summary>
            Obtiene o establece un Entrenador que indica el Jugador 1.
            </summary>
        </member>
        <member name="P:Library.Otros.Batalla.Jugador2">
            <summary>
            Obtiene o establece un Entrenador que indica el Jugador 2.
            </summary>
        </member>
        <member name="F:Library.Otros.Batalla._facadeJuego">
            <summary>
            Atributo Facade que indica la instancia de fachada.
            </summary>
        </member>
        <member name="M:Library.Otros.Batalla.#ctor(Library.Otros.Entrenador,Library.Otros.Entrenador,Library.Otros.FacadeJuego)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Otros.Batalla"/>.
            </summary>
            <param name="jugador1">El usuario que será el Jugador 1.</param>
            <param name="jugador2">El usuario que será el Jugador 2.</param>
            <param name="facadeJuego">La instancia de fachada.</param>
        </member>
        <member name="M:Library.Otros.Batalla.InicializarItems(Library.Otros.Entrenador)">
            <summary>
            Le agrega al jugador los items con los que contará durante la batalla.
            </summary>
            <param name="jugador">El jugador al que se le agregan los items.</param>
        </member>
        <member name="M:Library.Otros.Batalla.Comenzar">
            <summary>
            Da comienzo a una batalla
            </summary>
        </member>
        <member name="M:Library.Otros.Batalla.AsignarPokemonInicial(Library.Otros.Entrenador)">
            <summary>
            Le asigna al jugador un Pokémon aleatorio de su catálogo para atacar.
            </summary>
            <param name="jugador">El jugador al que se le asigna el Pokémon.</param>
        </member>
        <member name="F:Library.Otros.Batalla.accionesPendientes">
            <summary>
            Da comienzo al turno del jugador
            </summary>
            <param name="jugadorActual">El jugador que dará comienzo a su turno.</param>
            <param name="oponente">El jugador que no estará en su turno.</param>
        </member>
        <member name="T:Library.Otros.CambiarPokemon">
            <summary>
            Esta es la clase estática CambiarPokemon. Se encarga de gestionar la acción del mismo nombre durante la batalla.
            </summary>
        </member>
        <member name="M:Library.Otros.CambiarPokemon.CambioDePokemon(Library.Otros.Entrenador)">
            <summary>
            Le asigna un nuevo Pokémon actual al jugador que recibe.
            </summary>
            <param name="entrenador">El jugador al que se le cambia el Pokémon actual.</param>
        </member>
        <member name="T:Library.Otros.Efectividad">
            <summary>
            Esta es la clase estática Efectividad. Se encarga de calcular la efectividad del ataque que recibe.
            </summary>
        </member>
        <member name="M:Library.Otros.Efectividad.CalcularEfectividad(Library.Ataque,Library.Otros.Pokemon)">
            <summary>
            Calcula qué tan efectivo es el ataque que recibe según su tipo y el tipo del Pokémon atacado.
            </summary>
            <param name="ataque">El ataque que se está utilizando.</param>
            <param name="pokemon">El Pokémon que está siendo atacado.</param>
        </member>
        <member name="T:Library.Otros.Entrenador">
            <summary>
            Esta es la clase Entrenador. Se encarga de crear instancias de Entrenador y gestionar sus responsabilidades.
            </summary>
        </member>
        <member name="P:Library.Otros.Entrenador.Nombre">
            <summary>
            Obtiene o establece el nombre del entrenador.
            </summary>
        </member>
        <member name="F:Library.Otros.Entrenador.miCatalogo">
            <summary>
            Atributo tipo List que contiene los Pokémons vivos del entrenador.
            </summary>
        </member>
        <member name="F:Library.Otros.Entrenador.misMuertos">
            <summary>
            Atributo tipo List que contiene los Pokémons muertos del entrenador.
            </summary>
        </member>
        <member name="F:Library.Otros.Entrenador.misItems">
            <summary>
            Atributo tipo List que contiene los items del entrenador.
            </summary>
        </member>
        <member name="P:Library.Otros.Entrenador.MiTurno">
            <summary>
            Obtiene o establece un bool que indica si es o no el turno del entrenador.
            </summary>
        </member>
        <member name="P:Library.Otros.Entrenador.Turnos">
            <summary>
            Obtiene o establece un valor (int) que indica la cantiad de turnos del entrenador.
            </summary>
        </member>
        <member name="M:Library.Otros.Entrenador.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Otros.Entrenador"/>.
            </summary>
            <param name="nombre">El nombre del entrenador.</param>
        </member>
        <member name="M:Library.Otros.Entrenador.AgregarPokemon(Library.Otros.Pokemon)">
            <summary>
            Agrega un Pokémon al catálogo del entrenador.
            </summary>
            <param name="pokemon">Pokémon que se agrega.</param>
        </member>
        <member name="M:Library.Otros.Entrenador.QuitarPokemon(Library.Otros.Pokemon)">
            <summary>
            Quita un Pokémon del catálogo del entrenador.
            </summary>
            <param name="pokemon">Pokémon que es quitado.</param>
        </member>
        <member name="M:Library.Otros.Entrenador.AgregarItem(Library.Item.Item)">
            <summary>
            Agrega un item al catálogo del entrenador.
            </summary>
            <param name="item">item que se agrega.</param>
        </member>
        <member name="M:Library.Otros.Entrenador.QuitarItem(Library.Item.Item)">
            <summary>
            Quita un item del catálogo del entrenador.
            </summary>
            <param name="item">item que es quitado.</param>
        </member>
        <member name="M:Library.Otros.Entrenador.AgregarMuerto(Library.Otros.Pokemon)">
            <summary>
            Agrega a un Pokémon al catálogo de muertos.
            </summary>
            <param name="pokemon">Pokémon que es agregado.</param>
        </member>
        <member name="M:Library.Otros.Entrenador.QuitarMuerto(Library.Otros.Pokemon)">
            <summary>
            Quita a un Pokémon del catálogo de muertos.
            </summary>
            <param name="pokemon">Pokémon que es quitado.</param>
        </member>
        <member name="M:Library.Otros.Entrenador.Recuperar(Library.Otros.Pokemon)">
            <summary>
            Agrega al catálogo un Pokémon que fue reivivido.
            </summary>
            <param name="pokemon">Pokémon que es agregado.</param>
        </member>
        <member name="P:Library.Otros.Entrenador.PokemonActual">
            <summary>
            Obtiene o establece el Pokémon actual
            </summary>
        </member>
        <member name="T:Library.Otros.FacadeJuego">
            <summary>
            Esta es la clase Facade. Se encarga de crear instancias de Facade y gestionar sus responsabilidades.
            </summary>
        </member>
        <member name="F:Library.Otros.FacadeJuego.jugador1">
            <summary>
            Atributo tipo Entrenador que indica el Jugador 1.
            </summary>
        </member>
        <member name="F:Library.Otros.FacadeJuego.jugador2">
            <summary>
            Atributo tipo Entrenador que indica el Jugador 1.
            </summary>
        </member>
        <member name="M:Library.Otros.FacadeJuego.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Otros.FacadeJuego"/>.
            </summary>
            <param name="nombreJugador1">El nombre del Jugador 1.</param>
            <param name="nombreJugador2">El nombre del Jugador 2.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ComenzarBatalla">
            <summary>
            Se encarga de crear una instancia de batalla y darle comienzo.
            </summary>
        </member>
        <member name="M:Library.Otros.FacadeJuego.InicializarPokemon(Library.Otros.Entrenador)">
            <summary>
            Se encarga de mostrar los Pokémons disponibles para elegir.
            </summary>
            <param name="jugador">El entrenador que elige los Pokémons.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ElegirAccion">
            <summary>
            Se encarga de dar inicio a la acción que elige el entrenador
            </summary>
            <param name="jugador">El entrenador que realiza la acción.</param>
            <param name="oponente">El entrenador que no está en su turno.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ElegirPokemon(Library.Otros.Entrenador)">
            <summary>
            Se encarga de mostrar los Pokémons disponibles para cambiar.
            </summary>
            <param name="usuario">El entrenador que debe elegir.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ElegirAtaque(Library.Otros.Pokemon)">
            <summary>
            Se encarga de mostrar los ataques (todos) del Pokémon.
            </summary>
            <param name="pokemon">El Pokémon cuyas acciones se muestran.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ElegirAtaqueSimple(Library.Otros.Pokemon)">
            <summary>
            Se encarga de mostrar los ataques simples del Pokémon.
            </summary>
            <param name="pokemon">El Pokémon cuyas acciones se muestran.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ElegirItem(Library.Otros.Entrenador)">
            <summary>
            Se encarga de mostrar los items disponibles para elegir para usar.
            </summary>
            <param name="usuario">El entrenador que debe elegir.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ImprimirDatos(Library.Otros.Entrenador)">
            <summary>
            Se encarga de mostrar los datos del jugador (estado de sus Pokémons).
            </summary>
            <param name="usuario">El entrenador cuyos datos se muestran.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ElegirPokemonMuerto(Library.Otros.Entrenador)">
            <summary>
            Se encarga de mostrar los Pokémons muertos del jugador.
            </summary>
            <param name="usuario">El entrenador cuyos Pokémons muertos se muestran.</param>
        </member>
        <member name="M:Library.Otros.FacadeJuego.ElegirPokemonHerido(Library.Otros.Entrenador,System.Int32)">
            <summary>
            Se encarga de mostrar los Pokémons heridos del jugador.
            </summary>
            <param name="usuario">El entrenador cuyos Pokémons heridos se muestran.</param>
        </member>
        <member name="T:Library.Otros.Pokedex">
            <summary>
            Esta es la clase estática Pokedex. Se encarga de tener todos los Pokémons disponibles para usar.
            </summary>
        </member>
        <member name="F:Library.Otros.Pokedex.listaPokemons">
            <summary>
            Atributo estático tipo Lista que contiene todos los Pokémons disponibles.
            </summary>
        </member>
        <member name="M:Library.Otros.Pokedex.BuscarPokemon(System.String)">
            <summary>
            Se encarga de buscar un Pokémon en la Pokédex por su nombre.
            </summary>
            <param name="nombre">El nombre del Pokémon a buscar.</param>
        </member>
        <member name="T:Library.Otros.Pokemon">
            <summary>
            Esta es la clase Pokémon. Se encarga de crear instancias de Pokémon y gestionar sus responsabilidades.
            </summary>
        </member>
        <member name="M:Library.Otros.Pokemon.#ctor(System.String,System.String,Library.Ataque,Library.AtaqueEspecial)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Otros.Pokemon"/>.
            </summary>
            <param name="nombre">El nombre del Pokémon.</param>
            <param name="tipo">El tipo del Pokémon.</param>
        </member>
        <member name="P:Library.Otros.Pokemon.Nombre">
            <summary>
            Obtiene o establece un string que indica el nombre del Pokémon.
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.Tipo">
            <summary>
            Obtiene o establece un Tipo que indica tipo del Pokémon.
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.AtaqueEspecial">
            <summary>
            Atributo que indica la vida total del Pokémon
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.Dormido">
            <summary>
            Obtiene o establece un bool que indica si el Pokémon está dormido.
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.Paralizado">
            <summary>
            Obtiene o establece un bool que indica si el Pokémon está paralizado.
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.Envenenado">
            <summary>
            Obtiene o establece un bool que indica si el Pokémon está envenenado.
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.Quemado">
            <summary>
            Obtiene o establece un bool que indica si el Pokémon está quemadoo.
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.TurnosDormido">
            <summary>
            Obtiene o establece un int que indica los turnos dormido del Pokémon.
            </summary>
        </member>
        <member name="F:Library.Otros.Pokemon.ataques">
            <summary>
            Atributo que indica la lista de ataques del Pokémon.
            </summary>
        </member>
        <member name="M:Library.Otros.Pokemon.GetAtaques">
            <summary>
            Se encarga de retornar los ataques del Pokémon
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.VidaInicial">
            <summary>
            Obtiene un int que indica la vida inicial del Pokémon.
            </summary>
        </member>
        <member name="P:Library.Otros.Pokemon.VidaTotal">
            <summary>
            Obtiene un int que indica la vida total del Pokémon.
            </summary>
        </member>
        <member name="M:Library.Otros.Pokemon.Curar(System.Int32)">
            <summary>
            Se encarga de curar al Pokémon.
            </summary>
            <param name="puntos">Los puntos de vida que se le agregan al Pokémon.</param>
        </member>
        <member name="M:Library.Otros.Pokemon.RecibirDano(System.Int32)">
            <summary>
            Se encarga de dañar al Pokémon.
            </summary>
            <param name="dano">Los puntos de vida que se le quitan al Pokémon.</param>
        </member>
        <member name="T:Library.Otros.Turno">
            <summary>
            Esta es la clase estática Turno. Se encarga de realizar la acción que decide el usuario.
            </summary>
        </member>
        <member name="M:Library.Otros.Turno.HacerAccion(Library.Otros.Entrenador,System.String,Library.Otros.Entrenador,System.Int32,System.Int32,System.Int32,Library.Otros.FacadeJuego)">
            <summary>
            Se encarga de realizar la acción que el usuario decidió hacer.
            </summary>
            <param name="entrenador">El entrenador que elige acción.</param>
            <param name="numero">El número que indica la acción.</param>
            <param name="entrenadorAtacado">El entrenador que no está en su turno.</param>
        </member>
        <member name="T:Library.Otros.UsarItem">
            <summary>
            Esta es la clase estática UsarItem. Se encarga de gestionar la acción del mismo nombre durante la batalla.
            </summary>
        </member>
        <member name="M:Library.Otros.UsarItem.UsoDeItem(Library.Otros.Entrenador,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determina el item a usar y la acción que este realiza del usuario.
            </summary>
            <param name="entrenador">El entrenador que elige item.</param>
            <param name="usarRevivir">El número que indica si se puede usar Revivir.</param>
            <param name="usarSuperPocion">El número que indica si se puede usar SuperPocion.</param>
            <param name="usarCuraTotal">El número que indica si se puede usar CuraTotal.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.AccionesCommand">
            <summary>
            Esta clase implementa el comando 'acciones' del bot. Este comando permite al jugador elegir
            una acción durante la batalla.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.AccionesCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'acciones'. Este comando permite al jugador elegir una acción durante la batalla.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.AyudaCommand">
            <summary>
            Esta clase implementa el comando 'ayuda' del bot. Este comando muestra todos los
            comandos disponibles.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.AyudaCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'ayuda'. Este comando muestra todos los comandos disponibles.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.BattleCommand">
            <summary>
            Esta clase implementa el comando 'battle' del bot. Este comando une al
            jugador que envía el mensaje con el oponente que se recibe como parámetro,
            si lo hubiera, en una batalla; si no se recibe un oponente, lo une con
            cualquiera que esté esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.BattleCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'battle'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.JoinCommand">
            <summary>
            Esta clase implementa el comando 'join' del bot. Este comando une al jugador
            que envía el mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.JoinCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'join'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.LeaveCommand">
            <summary>
            Esta clase implementa el comando 'leave' del bot. Este comando remueve el
            jugador que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.LeaveCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'leave' del bot. Este comando remueve el jugador
            que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.UserInfoCommand">
            <summary>
            Esta clase implementa el comando 'userinfo', alias 'who' o 'whois' del bot.
            Este comando retorna información sobre el usuario que envía el mensaje o sobre
            otro usuario si se incluye como parámetro..
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.UserInfoCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'userinfo', alias 'who' o 'whois' del bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord a buscar.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.WaitingCommand">
            <summary>
            Esta clase implementa el comando 'waitinglist' del bot. Este comando muestra
            la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.WaitingCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'waitinglist'. Este comando muestra la lista de
            jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Battle">
            <summary>
            Esta clase representa una batalla entre dos jugadores.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Player1">
            <summary>
            Obtiene un valor que representa el primer jugador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Player2">
            <summary>
            Obtiene un valor que representa al oponente.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Battle.#ctor(System.String,System.String)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Battle"/> con los
            valores recibidos como argumento.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.BattlesList">
            <summary>
            Esta clase representa la lista de batallas en curso.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.BattlesList.AddBattle(System.String,System.String)">
            <summary>
            Crea una nueva batalla entre dos jugadores.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
            <returns>La batalla creada.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Facade">
            <summary>
            Esta clase recibe las acciones y devuelve los resultados que permiten
            implementar las historias de usuario. Otras clases que implementan el bot
            usan esta <see cref="T:Ucu.Poo.DiscordBot.Domain.Facade"/> pero no conocen el resto de las clases del
            dominio. Esta clase es un singleton.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Facade.Instance">
            <summary>
            Obtiene la única instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Facade"/>.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.Reset">
            <summary>
            Inicializa este singleton. Es necesario solo en los tests.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.AddTrainerToWaitingList(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.RemoveTrainerFromWaitingList(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El jugador a remover.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetAllTrainersWaiting">
            <summary>
            Obtiene la lista de jugadores esperando.
            </summary>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.TrainerIsWaiting(System.String)">
            <summary>
            Determina si un jugador está esperando para jugar.
            </summary>
            <param name="displayName">El jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.StartBattle(System.String,System.String)">
            <summary>
            Crea una batalla entre dos jugadores.
            </summary>
            <param name="playerDisplayName">El primer jugador.</param>
            <param name="opponentDisplayName">El oponente.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Trainer">
            <summary>
            Esta clase representa un jugador en el juego Pokémon.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.DisplayName">
            <summary>
            El nombre de usuario de Discord en el servidor del bot del jugador.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Trainer"/> con el
            nombre de usuario de Discord que se recibe como argumento.
            </summary>
            <param name="displayName">El nombre de usuario de Discord.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.WaitingList">
            <summary>
            Esta clase representa la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.AddTrainer(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a agregar.
            </param>
            <returns><c>true</c> si se agrega el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.RemoveTrainer(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a remover.
            </param>
            <returns><c>true</c> si se remueve el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.FindTrainerByDisplayName(System.String)">
            <summary>
            Busca un jugador por el nombre de usuario de Discord en el servidor del
            bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a buscar.
            </param>
            <returns>El jugador encontrado o <c>null</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.GetAnyoneWaiting">
            <summary>
            Retorna un jugador cualquiera esperando para jugar. En esta
            implementación provista no es cualquiera, sino el primero. En la
            implementación definitiva, debería ser uno aleatorio.
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.Bot">
            <summary>
            Esta clase implementa el bot de Discord.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.BotLoader">
            <summary>
            Esta clase ejecuta el bot de Discord hasta que en la terminal donde se
            ejecuta el bot se oprime la tecla 'Q'.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.IBot">
            <summary>
            La interfaz del Bot de Discord para usar con inyección de dependencias.
            </summary>
        </member>
        <member name="T:ClassLibrary.Train">
            <summary>
            Esta clase representa un tren muy básico.
            </summary>
        </member>
        <member name="P:ClassLibrary.Train.IsEngineStarted">
            <summary>
            Obtiene un valor que indica si las maquinas del tren han sido encendidas o no.
            </summary>
            <value><c>true</c> si las máquinas fueron encendidas, <c>false</c> en caso contrario.</value>
        </member>
        <member name="M:ClassLibrary.Train.StartEngines">
            <summary>
            Enciende las máquinas del tren.
            </summary>
            <returns>
            <c>true</c> si las máquinas pueden ser encendidas, <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:ClassLibrary.Train.StopEngines">
            <summary>
            Detiene las máquinas del tren.
            </summary>
            <returns>
            <c>true</c> si las máquinas pueden ser detenidas, <c>false</c> en caso contrario.
            </returns>
        </member>
    </members>
</doc>
